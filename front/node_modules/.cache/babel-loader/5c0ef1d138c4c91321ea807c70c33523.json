{"ast":null,"code":"var _jsxFileName = \"/Users/jbk/Documents/Elice/Project1/codes/0826_Proj1_local/front/src/components/project/Projects.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Button, Row, Col, Form } from \"react-bootstrap\";\nimport * as Api from \"../../api\";\nimport Project from \"./Project\";\nimport ProjectAddForm from \"./ProjectAddForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Projects(_ref) {\n  _s();\n\n  let {\n    portfolioOwnerId,\n    isEditable\n  } = _ref;\n  const test0825 = [{\n    user_id: \"userP1\",\n    title: \"프젝1 (프로젝트 MVP 백엔드 없는 상태입니다.)\",\n    description: \"화이팅 할 수 있다\",\n    startDate: \"8/22\",\n    endDate: \"진행중\"\n  }]; //useState로 projects 상태를 생성함.\n\n  const [projects, setProjects] = useState(test0825); //useState로 isAdding 상태를 생성함.\n\n  const [isAdding, setIsAdding] = useState(false);\n  useEffect(() => {\n    // \"projectlist/유저id\"로 GET 요청하고, response의 data로 projects를 세팅함.\n    Api.get(\"projectlist\", portfolioOwnerId).then(res => setProjects(res.data));\n  }, [portfolioOwnerId]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"\\uD504\\uB85C\\uC81D\\uD2B8 \\uC774\\uB825\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), projects.map(project => /*#__PURE__*/_jsxDEV(Project, {\n        project: project,\n        setProjects: setProjects,\n        isEditable: isEditable\n      }, project.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)), isEditable && /*#__PURE__*/_jsxDEV(Form.Group, {\n        as: Row,\n        className: \"mt-3 text-center\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          sm: {\n            span: 20\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setIsAdding(true),\n            children: \" + \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), isAdding && /*#__PURE__*/_jsxDEV(ProjectAddForm, {\n        portfolioOwnerId: portfolioOwnerId,\n        setProjects: setProjects,\n        setIsAdding: setIsAdding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Projects, \"14Jv4OeXG6M19L0GhV1/sYH25Ho=\");\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["/Users/jbk/Documents/Elice/Project1/codes/0826_Proj1_local/front/src/components/project/Projects.js"],"names":["React","useEffect","useState","Card","Button","Row","Col","Form","Api","Project","ProjectAddForm","Projects","portfolioOwnerId","isEditable","test0825","user_id","title","description","startDate","endDate","projects","setProjects","isAdding","setIsAdding","get","then","res","data","map","project","id","span"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,iBAA7C;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,SAASC,QAAT,OAAoD;AAAA;;AAAA,MAAlC;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,GAAkC;AAClD,QAAMC,QAAQ,GAAG,CAAC;AACEC,IAAAA,OAAO,EAAE,QADX;AAEEC,IAAAA,KAAK,EAAE,8BAFT;AAGEC,IAAAA,WAAW,EAAE,YAHf;AAIEC,IAAAA,SAAS,EAAE,MAJb;AAKEC,IAAAA,OAAO,EAAE;AALX,GAAD,CAAjB,CADkD,CAQlD;;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAACY,QAAD,CAAxC,CATkD,CAUlD;;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,KAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACAO,IAAAA,GAAG,CAACgB,GAAJ,CAAQ,aAAR,EAAuBZ,gBAAvB,EAAyCa,IAAzC,CAA+CC,GAAD,IAASL,WAAW,CAACK,GAAG,CAACC,IAAL,CAAlE;AACD,GAHQ,EAGN,CAACf,gBAAD,CAHM,CAAT;AAKA,sBACE,QAAC,IAAD;AAAA,2BACE,QAAC,IAAD,CAAM,IAAN;AAAA,8BACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGQ,QAAQ,CAACQ,GAAT,CAAcC,OAAD,iBACZ,QAAC,OAAD;AAEE,QAAA,OAAO,EAAEA,OAFX;AAGE,QAAA,WAAW,EAAER,WAHf;AAIE,QAAA,UAAU,EAAER;AAJd,SACOgB,OAAO,CAACC,EADf;AAAA;AAAA;AAAA;AAAA,cADD,CAFH,EAUGjB,UAAU,iBACT,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,EAAE,EAAER,GAAhB;AAAqB,QAAA,SAAS,EAAC,kBAA/B;AAAA,+BACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE;AAAE0B,YAAAA,IAAI,EAAE;AAAR,WAAT;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAE,MAAMR,WAAW,CAAC,IAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAXJ,EAiBGD,QAAQ,iBACP,QAAC,cAAD;AACE,QAAA,gBAAgB,EAAEV,gBADpB;AAEE,QAAA,WAAW,EAAES,WAFf;AAGE,QAAA,WAAW,EAAEE;AAHf;AAAA;AAAA;AAAA;AAAA,cAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD;;GA/CQZ,Q;;KAAAA,Q;AAiDT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Card, Button, Row, Col, Form } from \"react-bootstrap\";\nimport * as Api from \"../../api\";\nimport Project from \"./Project\";\nimport ProjectAddForm from \"./ProjectAddForm\";\n\nfunction Projects({ portfolioOwnerId, isEditable }) {\n  const test0825 = [{\n                      user_id: \"userP1\",\n                      title: \"프젝1 (프로젝트 MVP 백엔드 없는 상태입니다.)\",\n                      description: \"화이팅 할 수 있다\",\n                      startDate: \"8/22\",\n                      endDate: \"진행중\"\n                    }]\n  //useState로 projects 상태를 생성함.\n  const [projects, setProjects] = useState(test0825);\n  //useState로 isAdding 상태를 생성함.\n  const [isAdding, setIsAdding] = useState(false);\n\n  useEffect(() => {\n    // \"projectlist/유저id\"로 GET 요청하고, response의 data로 projects를 세팅함.\n    Api.get(\"projectlist\", portfolioOwnerId).then((res) => setProjects(res.data));\n  }, [portfolioOwnerId]);\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>프로젝트 이력</Card.Title>\n        {projects.map((project) => (\n          <Project\n            key={project.id}\n            project={project}\n            setProjects={setProjects}\n            isEditable={isEditable}\n          />\n        ))}\n        {isEditable && (\n          <Form.Group as={Row} className=\"mt-3 text-center\">\n            <Col sm={{ span: 20 }}>\n              <Button onClick={() => setIsAdding(true)}> + </Button>\n            </Col>\n          </Form.Group>\n        )}\n        {isAdding && (\n          <ProjectAddForm\n            portfolioOwnerId={portfolioOwnerId}\n            setProjects={setProjects}\n            setIsAdding={setIsAdding}\n          />\n        )}\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default Projects;\n"]},"metadata":{},"sourceType":"module"}